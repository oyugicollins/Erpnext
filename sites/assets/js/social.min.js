(function () {
	'use strict';

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script = {
		props: [
			'liked_by',
			'comment_count' ],
		computed: {
			like_count: function like_count() {
				return this.split_string(this.liked_by).length;
			},
			post_liked: function post_liked() {
				return this.split_string(this.liked_by).includes(frappe.session.user);
			},
			liked_by_data: function liked_by_data() {
				return JSON.stringify(this.split_string(this.liked_by));
			}
		},
		methods: {
			split_string: function split_string(str) {
				return str && str !== '' ? str.split('\n') : []
			}
		}
	};

	/* script */
	            var __vue_script__ = script;
	            
	/* template */
	var __vue_render__ = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "post-action-container" }, [
	    _c(
	      "div",
	      {
	        staticClass: "like",
	        on: {
	          click: function($event) {
	            _vm.$emit("toggle_like");
	          }
	        }
	      },
	      [
	        _c("i", {
	          staticClass: "octicon octicon-heart",
	          class: { liked: _vm.post_liked }
	        }),
	        _vm._v(" "),
	        _c(
	          "span",
	          {
	            staticClass: "likes",
	            attrs: { "data-liked-by": _vm.liked_by_data }
	          },
	          [_vm._v(_vm._s(_vm.like_count))]
	        )
	      ]
	    ),
	    _vm._v(" "),
	    _c(
	      "div",
	      {
	        staticClass: "comment",
	        on: {
	          click: function($event) {
	            _vm.$emit("toggle_comment");
	          }
	        }
	      },
	      [
	        _c("i", { staticClass: "octicon octicon-comment" }),
	        _vm._v(" "),
	        _c("span", { staticClass: "comment_count" }, [
	          _vm._v(_vm._s(_vm.comment_count))
	        ])
	      ]
	    )
	  ])
	};
	var __vue_staticRenderFns__ = [];
	__vue_render__._withStripped = true;

	  /* style */
	  var __vue_inject_styles__ = function (inject) {
	    if (!inject) { return }
	    inject("data-v-617b5082_0", { source: "\n.post-action-container[data-v-617b5082] {\n  display: flex;\n  background-color: #F6F6F6;\n  padding: 10px;\n}\n.post-action-container .comment[data-v-617b5082],\n.post-action-container .like[data-v-617b5082] {\n  padding-right: 20px;\n  cursor: pointer;\n  color: #8d99a6;\n}\n.post-action-container .comment span[data-v-617b5082],\n.post-action-container .like span[data-v-617b5082] {\n  padding-left: 5px;\n}\n.post-action-container .comment[data-v-617b5082]:hover,\n.post-action-container .like[data-v-617b5082]:hover {\n  color: #707f90;\n}\n.post-action-container .likes[data-v-617b5082] {\n  cursor: pointer;\n}\n.post-action-container .liked[data-v-617b5082] {\n  color: #fc4f51;\n}\n.post-action-container .liked[data-v-617b5082]:hover {\n  color: #fd8183 !important;\n}\n.post-action-container .pinned[data-v-617b5082] {\n  color: black;\n}\n", map: {"version":3,"sources":["PostAction.vue"],"names":[],"mappings":";AAAA;EACE,cAAc;EACd,0BAA0B;EAC1B,cAAc;CACf;AACD;;EAEE,oBAAoB;EACpB,gBAAgB;EAChB,eAAe;CAChB;AACD;;EAEE,kBAAkB;CACnB;AACD;;EAEE,eAAe;CAChB;AACD;EACE,gBAAgB;CACjB;AACD;EACE,eAAe;CAChB;AACD;EACE,0BAA0B;CAC3B;AACD;EACE,aAAa;CACd","file":"PostAction.vue","sourcesContent":[".post-action-container {\n  display: flex;\n  background-color: #F6F6F6;\n  padding: 10px;\n}\n.post-action-container .comment,\n.post-action-container .like {\n  padding-right: 20px;\n  cursor: pointer;\n  color: #8d99a6;\n}\n.post-action-container .comment span,\n.post-action-container .like span {\n  padding-left: 5px;\n}\n.post-action-container .comment:hover,\n.post-action-container .like:hover {\n  color: #707f90;\n}\n.post-action-container .likes {\n  cursor: pointer;\n}\n.post-action-container .liked {\n  color: #fc4f51;\n}\n.post-action-container .liked:hover {\n  color: #fd8183 !important;\n}\n.post-action-container .pinned {\n  color: black;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__ = "data-v-617b5082";
	  /* module identifier */
	  var __vue_module_identifier__ = undefined;
	  /* functional template */
	  var __vue_is_functional_template__ = false;
	  /* component normalizer */
	  function __vue_normalize__(
	    template, style, script$$1,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostAction.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var PostAction = __vue_normalize__(
	    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
	    __vue_inject_styles__,
	    __vue_script__,
	    __vue_scope_id__,
	    __vue_is_functional_template__,
	    __vue_module_identifier__,
	    __vue_create_injector__,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$1 = {
		props: ['comments'],
		data: function data() {
			return {
				comment_content: ''
			}
		},
		methods: {
			get_avatar: function get_avatar(user) {
				return frappe.avatar(user)
			},
			get_time: function get_time(timestamp) {
				return comment_when(timestamp, true)
			},
			create_comment: function create_comment() {
				this.$emit('create_comment', this.comment_content);
				this.comment_content = '';
			},
			go_to_profile_page: function go_to_profile_page(user) {
				frappe.set_route('social', 'profile', user);
			}
		}
	};

	/* script */
	            var __vue_script__$1 = script$1;
	            
	/* template */
	var __vue_render__$1 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", [
	    _c("div", { staticClass: "comment-box flex-column" }, [
	      _c("div", { staticClass: "text-muted comment-label" }, [
	        _vm._v(_vm._s(_vm.__("Add a comment")))
	      ]),
	      _vm._v(" "),
	      _c("textarea", {
	        directives: [
	          {
	            name: "model",
	            rawName: "v-model",
	            value: _vm.comment_content,
	            expression: "comment_content"
	          }
	        ],
	        domProps: { value: _vm.comment_content },
	        on: {
	          input: function($event) {
	            if ($event.target.composing) {
	              return
	            }
	            _vm.comment_content = $event.target.value;
	          }
	        }
	      }),
	      _vm._v(" "),
	      _c(
	        "button",
	        {
	          staticClass: "btn btn-primary btn-sm",
	          attrs: { disabled: _vm.comment_content === "" },
	          on: { click: _vm.create_comment }
	        },
	        [_vm._v("\n\t\t\t" + _vm._s(_vm.__("Comment")) + "\n\t\t")]
	      )
	    ]),
	    _vm._v(" "),
	    _vm.comments.length
	      ? _c(
	          "div",
	          { staticClass: "comment-list" },
	          _vm._l(_vm.comments, function(comment) {
	            return _c("div", { key: comment.name, staticClass: "comment" }, [
	              _c("span", {
	                staticClass: "pull-right text-muted",
	                domProps: { innerHTML: _vm._s(_vm.get_time(comment.creation)) }
	              }),
	              _vm._v(" "),
	              _c("span", {
	                staticClass: "cursor-pointer",
	                domProps: { innerHTML: _vm._s(_vm.get_avatar(comment.owner)) },
	                on: {
	                  click: function($event) {
	                    _vm.go_to_profile_page(comment.owner);
	                  }
	                }
	              }),
	              _vm._v(" "),
	              _c("span", [_vm._v(_vm._s(comment.content))])
	            ])
	          })
	        )
	      : _vm._e()
	  ])
	};
	var __vue_staticRenderFns__$1 = [];
	__vue_render__$1._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$1 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-191f8400_0", { source: "\n.comment-box .comment-label[data-v-191f8400] {\n  margin-bottom: 5px;\n}\n.comment-box textarea[data-v-191f8400] {\n  width: 100%;\n  border-radius: 4px;\n  outline: none;\n  border: none;\n  margin-bottom: 15px;\n  height: 60px;\n  padding: 5px;\n  border: 1px solid #d1d8dd;\n  resize: none;\n}\n.comment-box button[data-v-191f8400] {\n  padding: 2px 5px;\n  font-size: 10px;\n  align-self: flex-end;\n}\n.comment-list[data-v-191f8400] {\n  margin-top: 10px;\n}\n.comment-list .comment[data-v-191f8400] {\n  padding: 5px 0;\n}\n", map: {"version":3,"sources":["PostComment.vue"],"names":[],"mappings":";AAAA;EACE,mBAAmB;CACpB;AACD;EACE,YAAY;EACZ,mBAAmB;EACnB,cAAc;EACd,aAAa;EACb,oBAAoB;EACpB,aAAa;EACb,aAAa;EACb,0BAA0B;EAC1B,aAAa;CACd;AACD;EACE,iBAAiB;EACjB,gBAAgB;EAChB,qBAAqB;CACtB;AACD;EACE,iBAAiB;CAClB;AACD;EACE,eAAe;CAChB","file":"PostComment.vue","sourcesContent":[".comment-box .comment-label {\n  margin-bottom: 5px;\n}\n.comment-box textarea {\n  width: 100%;\n  border-radius: 4px;\n  outline: none;\n  border: none;\n  margin-bottom: 15px;\n  height: 60px;\n  padding: 5px;\n  border: 1px solid #d1d8dd;\n  resize: none;\n}\n.comment-box button {\n  padding: 2px 5px;\n  font-size: 10px;\n  align-self: flex-end;\n}\n.comment-list {\n  margin-top: 10px;\n}\n.comment-list .comment {\n  padding: 5px 0;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$1 = "data-v-191f8400";
	  /* module identifier */
	  var __vue_module_identifier__$1 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$1 = false;
	  /* component normalizer */
	  function __vue_normalize__$1(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostComment.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$1() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var PostComment = __vue_normalize__$1(
	    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
	    __vue_inject_styles__$1,
	    __vue_script__$1,
	    __vue_scope_id__$1,
	    __vue_is_functional_template__$1,
	    __vue_module_identifier__$1,
	    __vue_create_injector__$1,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$2 = {
		props: ['options'],
	};

	/* script */
	            var __vue_script__$2 = script$2;
	            
	/* template */
	var __vue_render__$2 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "dropdown" }, [
	    _c("span", {
	      staticClass: "caret cursor-pointer dropdown-toggle",
	      attrs: { "data-toggle": "dropdown" }
	    }),
	    _vm._v(" "),
	    _c(
	      "ul",
	      { staticClass: "dropdown-menu" },
	      _vm._l(_vm.options, function(option) {
	        return _c("li", { key: option.label }, [
	          _c("a", { on: { click: option.action } }, [
	            _vm._v(_vm._s(option.label))
	          ])
	        ])
	      })
	    )
	  ])
	};
	var __vue_staticRenderFns__$2 = [];
	__vue_render__$2._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$2 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-cfe14db8_0", { source: "\n.dropdown-menu[data-v-cfe14db8] {\n  min-width: 100px;\n  left: auto;\n  right: 0;\n}\n.dropdown-menu a[data-v-cfe14db8] {\n  padding: 12px;\n  font-size: 10px;\n}\n", map: {"version":3,"sources":["PostDropdownMenu.vue"],"names":[],"mappings":";AAAA;EACE,iBAAiB;EACjB,WAAW;EACX,SAAS;CACV;AACD;EACE,cAAc;EACd,gBAAgB;CACjB","file":"PostDropdownMenu.vue","sourcesContent":[".dropdown-menu {\n  min-width: 100px;\n  left: auto;\n  right: 0;\n}\n.dropdown-menu a {\n  padding: 12px;\n  font-size: 10px;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$2 = "data-v-cfe14db8";
	  /* module identifier */
	  var __vue_module_identifier__$2 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$2 = false;
	  /* component normalizer */
	  function __vue_normalize__$2(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostDropdownMenu.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$2() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$2.styles || (__vue_create_injector__$2.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var PostDropdownMenu = __vue_normalize__$2(
	    { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
	    __vue_inject_styles__$2,
	    __vue_script__$2,
	    __vue_scope_id__$2,
	    __vue_is_functional_template__$2,
	    __vue_module_identifier__$2,
	    __vue_create_injector__$2,
	    undefined
	  );

	//

	var script$3 = {
		props: ['post'],
		components: {
			PostAction: PostAction,
			PostComment: PostComment,
			PostDropdownMenu: PostDropdownMenu
		},
		data: function data() {
			return {
				user_avatar: frappe.avatar(this.post.owner, 'avatar-medium'),
				post_time: comment_when(this.post.creation),
				user_name: frappe.user_info(this.post.owner).fullname,
				comment_count: 0,
				comments: [],
				show_comments: false,
				is_globally_pinnable: frappe.user_roles.includes('System Manager') && frappe.social.is_home_page(),
				is_pinnable: false,
				is_user_post_owner: this.post.owner === frappe.session.user
			}
		},
		computed: {
			can_pin: function can_pin() {
				return this.is_globally_pinnable || this.is_pinnable
			},
			is_pinned: function is_pinned() {
				return this.post.is_globally_pinned && frappe.social.is_home_page()
			},
			options: function options() {
				var options = [];
				if (this.can_pin) {
					if (this.is_pinned) {
						options.push({
							'label': __('Unpin'),
							'action': this.toggle_pin
						});
					} else {
						options.push({
							'label': __('Pin Globally'),
							'action': this.toggle_pin
						});
					}
				}
				if (this.is_user_post_owner) {
					options.push({
						'label': __('Delete'),
						'action': this.delete_post
					});
				}
				return options;
			}
		},
		created: function created() {
			var this$1 = this;

			frappe.db.get_list('Post Comment', {
				fields: ['name', 'content', 'owner', 'creation'],
				order_by: 'creation desc',
				filters: {
					parent: this.post.name
				}
			}).then(function (comments) {
				this$1.comments = comments;
			});

			if (!this.post.liked_by) {
				this.$set(this.post, 'liked_by', '');
			}

			frappe.realtime.on('new_post_comment' + this.post.name, function (comment) {
				this$1.comments = [comment].concat(this$1.comments);
			});
			frappe.realtime.on('update_liked_by' + this.post.name, this.update_liked_by);

			frappe.realtime.on('delete_post' + this.post.name, function () {
				this$1.$emit('delete-post');
			});

			this.$root.$on('user_image_updated', function () {
				this$1.user_avatar = frappe.avatar(this$1.post.owner, 'avatar-medium');
			});

		},
		mounted: function mounted() {
			var this$1 = this;

			this.$refs['content'].querySelectorAll('img').forEach(function (img) {
				img.addEventListener('click', function () {
					this$1.$root.$emit('show_preview', img.src);
				});
			});

			this.$refs['content'].querySelectorAll('a').forEach(function (link_element) {
				// to open link in new tab
				link_element.target = 'blank';
				this$1.generate_preview(link_element);
			});
		},
		methods: {
			goto_profile: function goto_profile(user) {
				frappe.set_route('social', 'profile/' + user);
			},
			toggle_comment: function toggle_comment() {
				this.show_comments = !this.show_comments;
			},
			update_liked_by: function update_liked_by(liked_by) {
				this.post.liked_by = liked_by;
			},
			toggle_like: function toggle_like() {
				frappe.xcall('frappe.social.doctype.post.post.toggle_like', {
					post_name: this.post.name,
				});
			},
			toggle_pin: function toggle_pin() {
				var this$1 = this;

				if (this.is_globally_pinnable) {
					frappe.db.set_value('Post', this.post.name, 'is_globally_pinned', cint(!this.is_pinned))
						.then(function (res) { return this$1.post.is_globally_pinned = cint(res.message.is_globally_pinned); });
				}
				if (this.is_pinnable) {
					frappe.db.set_value('Post', this.post.name, 'is_pinned', cint(!this.is_pinned))
						.then(function (res) { return this$1.post.is_pinned = cint(res.message.is_pinned); });
				}
			},
			create_comment: function create_comment(content) {
				var comment = frappe.model.get_new_doc('Post Comment');
				comment.content = content;
				comment.parent = this.post.name;
				frappe.db.insert(comment);
			},
			delete_post: function delete_post() {
				var this$1 = this;

				frappe.confirm(__("Are you sure you want to delete this post?"), function () {
					frappe.dom.freeze();
					frappe.xcall('frappe.social.doctype.post.post.delete_post', {
						'post_name': this$1.post.name
					}).then(frappe.dom.unfreeze);
				});
			},
			generate_preview: function generate_preview(link_element) {
				// TODO: move the code to separate component
				frappe.xcall('frappe.social.doctype.post.post.get_link_info', {
					'url': link_element.href
				}).then(function (info) {
					var title = frappe.ellipsis(info['og:title'] || info['title'], 60);
					var description = frappe.ellipsis(info['og:description'] || info['description'], 280);
					var image = info['og:image'];
					var url = info['og:url'];

					if (title) {
						link_element.insertAdjacentHTML('afterend', ("\n\t\t\t\t\t\t<a href=\"" + url + "\" target=\"blank\" class=\"preview-card\" class=\"flex\">\n\t\t\t\t\t\t\t<img src=\"" + image + "\"/>\n\t\t\t\t\t\t\t<div class=\"flex-column\">\n\t\t\t\t\t\t\t\t<h5>" + title + "</h5>\n\t\t\t\t\t\t\t\t<p class=\"text-muted\">" + description + "</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t") );
					}
				})
				.catch(console.error);
			}
		}
	};

	/* script */
	            var __vue_script__$3 = script$3;
	            
	/* template */
	var __vue_render__$3 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    { staticClass: "post-card" },
	    [
	      _c(
	        "div",
	        { staticClass: "post-body", class: { "pinned ": _vm.is_pinned } },
	        [
	          _c(
	            "div",
	            { staticClass: "pull-right flex" },
	            [
	              _vm.is_pinned
	                ? _c("div", { staticClass: "pin-option" }, [
	                    _vm._v("\n\t\t\t\tGlobally Pinned\n\t\t\t")
	                  ])
	                : _vm._e(),
	              _vm._v(" "),
	              _vm.options.length
	                ? _c("post-dropdown-menu", {
	                    staticClass: "post-dropdown-menu",
	                    attrs: { options: _vm.options }
	                  })
	                : _vm._e()
	            ],
	            1
	          ),
	          _vm._v(" "),
	          _c("div", {
	            staticClass: "user-avatar",
	            domProps: { innerHTML: _vm._s(_vm.user_avatar) },
	            on: {
	              click: function($event) {
	                _vm.goto_profile(_vm.post.owner);
	              }
	            }
	          }),
	          _vm._v(" "),
	          _c(
	            "a",
	            {
	              staticClass: "user-name",
	              on: {
	                click: function($event) {
	                  _vm.goto_profile(_vm.post.owner);
	                }
	              }
	            },
	            [_vm._v(_vm._s(_vm.user_name))]
	          ),
	          _vm._v(" "),
	          _c("div", {
	            staticClass: "text-muted",
	            domProps: { innerHTML: _vm._s(_vm.post_time) }
	          }),
	          _vm._v(" "),
	          _c("div", {
	            ref: "content",
	            staticClass: "content",
	            domProps: { innerHTML: _vm._s(_vm.post.content) }
	          })
	        ]
	      ),
	      _vm._v(" "),
	      _c("post-action", {
	        attrs: {
	          liked_by: _vm.post.liked_by,
	          comment_count: _vm.comments.length
	        },
	        on: { toggle_comment: _vm.toggle_comment, toggle_like: _vm.toggle_like }
	      }),
	      _vm._v(" "),
	      _vm.show_comments
	        ? _c("post-comment", {
	            staticClass: "post-comments",
	            attrs: { comments: _vm.comments },
	            on: { create_comment: _vm.create_comment }
	          })
	        : _vm._e()
	    ],
	    1
	  )
	};
	var __vue_staticRenderFns__$3 = [];
	__vue_render__$3._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$3 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-181e285b_0", { source: "\n.post-comments[data-v-181e285b] {\n  padding: 15px 46px;\n  padding-top: 0px;\n  background: #F6F6F6;\n}\n", map: {"version":3,"sources":["Post.vue"],"names":[],"mappings":";AAAA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,oBAAoB;CACrB","file":"Post.vue","sourcesContent":[".post-comments {\n  padding: 15px 46px;\n  padding-top: 0px;\n  background: #F6F6F6;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$3 = "data-v-181e285b";
	  /* module identifier */
	  var __vue_module_identifier__$3 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$3 = false;
	  /* component normalizer */
	  function __vue_normalize__$3(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/Post.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$3() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$3.styles || (__vue_create_injector__$3.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var Post = __vue_normalize__$3(
	    { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
	    __vue_inject_styles__$3,
	    __vue_script__$3,
	    __vue_scope_id__$3,
	    __vue_is_functional_template__$3,
	    __vue_module_identifier__$3,
	    __vue_create_injector__$3,
	    undefined
	  );

	/* script */

	/* template */
	var __vue_render__$4 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _vm._m(0)
	};
	var __vue_staticRenderFns__$4 = [
	  function() {
	    var _vm = this;
	    var _h = _vm.$createElement;
	    var _c = _vm._self._c || _h;
	    return _c(
	      "div",
	      { staticClass: "post-skeleton flex-column justify-between" },
	      [
	        _c("div", { staticClass: "post-skeleton-body" }, [
	          _c("div", { staticClass: "flex" }, [
	            _c("div", { staticClass: "avatar avatar-medium" }),
	            _vm._v(" "),
	            _c("div", { staticClass: "user-name" })
	          ]),
	          _vm._v(" "),
	          _c("div", { staticClass: "content" })
	        ]),
	        _vm._v(" "),
	        _c("div", { staticClass: "post-skeleton-foot" })
	      ]
	    )
	  }
	];
	__vue_render__$4._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$4 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-ba7a757c_0", { source: "\n@keyframes load-data-v-ba7a757c {\n0% {\n    background-position: -100px;\n}\n40%,\n  100% {\n    background-position: 500px;\n}\n}\n.post-skeleton[data-v-ba7a757c] {\n  height: 250px;\n  border-radius: 4px;\n  max-width: 600px;\n  border: 1px solid #ededed;\n  margin-bottom: 15px;\n}\n.post-skeleton .post-skeleton-body[data-v-ba7a757c] {\n  padding: 15px;\n}\n.post-skeleton .post-skeleton-body .user-name[data-v-ba7a757c] {\n  height: 10px;\n  width: 100px;\n  margin-left: 5px;\n}\n.post-skeleton .post-skeleton-body .content[data-v-ba7a757c] {\n  height: 100px;\n  margin: 15px 0 0 46px;\n}\n.post-skeleton .post-skeleton-body .user-name[data-v-ba7a757c],\n.post-skeleton .post-skeleton-body .avatar[data-v-ba7a757c],\n.post-skeleton .post-skeleton-body .content[data-v-ba7a757c] {\n  background-image: linear-gradient(90deg, #f8f8f8 0px, #fcfcfc 40px, #f8f8f8 80px);\n  background-size: 600px;\n  border-radius: 4px;\n  animation: load-data-v-ba7a757c 3s infinite linear;\n}\n.post-skeleton .post-skeleton-foot[data-v-ba7a757c] {\n  width: 100%;\n  height: 40px;\n  background: #f8f8f8;\n}\n", map: {"version":3,"sources":["PostSkeleton.vue","/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostSkeleton.vue"],"names":[],"mappings":";AAAA;AACE;IACE,4BAA4B;CAC7B;AACD;;IAEE,2BAA2B;CAC5B;CACF;AACD;EACE,cAAc;EACd,mBAAmB;EACnB,iBAAiB;ECCnB,0BAAA;EACA,oBAAA;CACA;ADCA;ECCA,cAAA;CACA;AACA;EACA,aAAA;EDCE,aAAa;ECCf,iBAAA;CACA;AACA;EACA,cAAA;EDCE,sBAAsB;CCCxB;AACA;;;EAGA,kFAAA;EACA,uBAAA;EACA,mBAAA;EACA,mDAAA;CACA;AACA;EACA,YAAA;EACA,aAAA;EACA,oBAAA;CACA","file":"PostSkeleton.vue","sourcesContent":["@keyframes load {\n  0% {\n    background-position: -100px;\n  }\n  40%,\n  100% {\n    background-position: 500px;\n  }\n}\n.post-skeleton {\n  height: 250px;\n  border-radius: 4px;\n  max-width: 600px;\n  border: 1px solid #ededed;\n  margin-bottom: 15px;\n}\n.post-skeleton .post-skeleton-body {\n  padding: 15px;\n}\n.post-skeleton .post-skeleton-body .user-name {\n  height: 10px;\n  width: 100px;\n  margin-left: 5px;\n}\n.post-skeleton .post-skeleton-body .content {\n  height: 100px;\n  margin: 15px 0 0 46px;\n}\n.post-skeleton .post-skeleton-body .user-name,\n.post-skeleton .post-skeleton-body .avatar,\n.post-skeleton .post-skeleton-body .content {\n  background-image: linear-gradient(90deg, #f8f8f8 0px, #fcfcfc 40px, #f8f8f8 80px);\n  background-size: 600px;\n  border-radius: 4px;\n  animation: load 3s infinite linear;\n}\n.post-skeleton .post-skeleton-foot {\n  width: 100%;\n  height: 40px;\n  background: #f8f8f8;\n}\n","<template>\n\t<div class=\"post-skeleton flex-column justify-between\">\n\t\t<div class=\"post-skeleton-body\">\n\t\t\t<div class=\"flex\">\n\t\t\t\t<div class=\"avatar avatar-medium\"></div>\n\t\t\t\t<div class=\"user-name\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"content\"></div>\n\t\t</div>\n\t\t<div class=\"post-skeleton-foot\"></div>\n\t</div>\n</template>\n<style lang=\"less\" scoped>\n@base-color: #f8f8f8;\n@shine-color: #fcfcfc;\n@animation-duration: 3s;\n\n@keyframes load {\n\t0% {\n\t\tbackground-position: -100px\n\t}\n\n\t40%, 100% {\n\t\tbackground-position: 500px\n\t}\n}\n\n.background-img() {\n\tbackground-image: linear-gradient(90deg, @base-color 0px, @shine-color 40px, @base-color 80px);\n\tbackground-size: 600px\n}\n.post-skeleton {\n\theight: 250px;\n\tborder-radius: 4px;\n\tmax-width: 600px;\n\tborder: 1px solid #ededed;\n\tmargin-bottom: 15px;\n\t.post-skeleton-body {\n\t\tpadding: 15px;\n\t\t.user-name {\n\t\t\theight: 10px;\n\t\t\twidth: 100px;\n\t\t\tmargin-left: 5px;\n\t\t}\n\t\t.content {\n\t\t\theight: 100px;\n\t\t\tmargin: 15px 0 0 46px;\n\t\t}\n\t\t.user-name, .avatar, .content {\n\t\t\t.background-img();\n\t\t\tborder-radius: 4px;\n\t\t\tanimation: load @animation-duration infinite linear;\n\t\t}\n\t}\n\t.post-skeleton-foot {\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tbackground: @base-color;\n\t}\n}\n</style>"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$4 = "data-v-ba7a757c";
	  /* module identifier */
	  var __vue_module_identifier__$4 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$4 = false;
	  /* component normalizer */
	  function __vue_normalize__$4(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostSkeleton.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$4() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$4.styles || (__vue_create_injector__$4.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var PostSkeleton = __vue_normalize__$4(
	    { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
	    __vue_inject_styles__$4,
	    {},
	    __vue_scope_id__$4,
	    __vue_is_functional_template__$4,
	    __vue_module_identifier__$4,
	    __vue_create_injector__$4,
	    undefined
	  );

	//

	var script$4 = {
		props: ['post_list_filter'],
		components: {
			Post: Post,
			PostSkeleton: PostSkeleton
		},
		data: function data() {
			return {
				posts: [],
				more_posts_available: true,
				loading_posts: false,
				load_new: false
			}
		},
		created: function created() {
			var this$1 = this;

			window.addEventListener('scroll', this.handle_scroll);
			this.update_posts();
			this.$parent.$on('load_new_posts', function () {
				this$1.update_posts();
			});
			frappe.realtime.on('global_pin', function () {
				this$1.update_posts();
			});
		},
		watch: {
			post_list_filter: function post_list_filter(old_val, new_val) {
				if (JSON.stringify(old_val) !== JSON.stringify(new_val)){
					this.update_posts();
				}
			}
		},
		methods: {
			get_posts: function get_posts(filters, load_old) {
				return frappe.db.get_list('Post', {
					fields: ['name', 'content', 'owner', 'creation', 'liked_by', 'is_pinned', 'is_globally_pinned'],
					filters: filters,
					limit_start: load_old ? this.posts.length : 0,
					order_by: 'is_globally_pinned desc, creation desc',
				})
			},
			update_posts: function update_posts(load_old) {
				var this$1 = this;
				if ( load_old === void 0 ) load_old = false;

				if (!this.post_list_filter) { return }
				this.loading_posts = true;

				var filters = Object.assign({}, this.post_list_filter);

				this.get_posts(filters, load_old).then(function (res) {
					if (load_old) {
						if (!res.length) {
							this$1.more_posts_available = false;
						}
						this$1.posts = this$1.posts.concat(res);
					} else {
						this$1.posts = res;
					}
				}).finally(function () {
					this$1.loading_posts = false;
				});
			},
			handle_scroll: frappe.utils.debounce(function() {
				var screen_bottom = document.documentElement.scrollTop + window.innerHeight === document.documentElement.offsetHeight;
				if (screen_bottom && this.more_posts_available) {
					if (!this.loading_posts) {
						this.update_posts(true);
					}
				}
			}, 500),
			delete_post: function delete_post(index) {
				this.posts.splice(index, 1);
			},
		},
		destroyed: function destroyed() {
			window.removeEventListener('scroll', this.handle_scroll);
		}
	};

	/* script */
	            var __vue_script__$4 = script$4;
	            
	/* template */
	var __vue_render__$5 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    [
	      _vm._l(5, function(index) {
	        return _vm.loading_posts && !_vm.posts.length
	          ? _c("post-skeleton", { key: index })
	          : _vm._e()
	      }),
	      _vm._v(" "),
	      _c(
	        "transition-group",
	        { attrs: { name: "flip-list" } },
	        _vm._l(_vm.posts, function(post, index) {
	          return _c("post", {
	            key: post.name,
	            attrs: { post: post },
	            on: {
	              "delete-post": function($event) {
	                _vm.delete_post(index);
	              }
	            }
	          })
	        })
	      ),
	      _vm._v(" "),
	      !_vm.loading_posts && !_vm.posts.length
	        ? _c("div", { staticClass: "no-post-message text-muted" }, [
	            _vm._v("\n\t\t" + _vm._s(_vm.__("No posts yet")) + "\n\t")
	          ])
	        : _vm._e(),
	      _vm._v(" "),
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value: _vm.loading_posts && _vm.posts.length,
	              expression: "loading_posts && posts.length"
	            }
	          ],
	          staticClass: "text-center padding"
	        },
	        [_vm._v("\n\t\t" + _vm._s(_vm.__("Fetching posts...")) + "\n\t")]
	      ),
	      _vm._v(" "),
	      _c(
	        "div",
	        {
	          directives: [
	            {
	              name: "show",
	              rawName: "v-show",
	              value:
	                _vm.posts.length &&
	                !_vm.loading_posts &&
	                !_vm.more_posts_available,
	              expression:
	                "posts.length && !loading_posts && !more_posts_available"
	            }
	          ],
	          staticClass: "text-center padding"
	        },
	        [_vm._v("\n\t\t" + _vm._s(_vm.__("That's all folks")) + "\n\t")]
	      )
	    ],
	    2
	  )
	};
	var __vue_staticRenderFns__$5 = [];
	__vue_render__$5._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$5 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-b9e91796_0", { source: "\n.no-post-message[data-v-b9e91796] {\n  height: 200px;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 200px;\n}\n.flip-list-move[data-v-b9e91796],\n.flip-list-to[data-v-b9e91796] {\n  transition: transform 0.3s;\n}\n", map: {"version":3,"sources":["PostLoader.vue"],"names":[],"mappings":";AAAA;EACE,cAAc;EACd,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;CACpB;AACD;;EAEE,2BAA2B;CAC5B","file":"PostLoader.vue","sourcesContent":[".no-post-message {\n  height: 200px;\n  text-align: center;\n  vertical-align: middle;\n  line-height: 200px;\n}\n.flip-list-move,\n.flip-list-to {\n  transition: transform 0.3s;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$5 = "data-v-b9e91796";
	  /* module identifier */
	  var __vue_module_identifier__$5 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$5 = false;
	  /* component normalizer */
	  function __vue_normalize__$5(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostLoader.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$5() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$5.styles || (__vue_create_injector__$5.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var PostLoader = __vue_normalize__$5(
	    { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
	    __vue_inject_styles__$5,
	    __vue_script__$4,
	    __vue_scope_id__$5,
	    __vue_is_functional_template__$5,
	    __vue_module_identifier__$5,
	    __vue_create_injector__$5,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$5 = {
		data: function data() {
			return {
				frequently_visited_list: [],
				user: frappe.user_info(frappe.session.user),
				user_avatar: frappe.avatar(this.user_id, 'avatar-xl')
			}
		},
		created: function created() {
			this.set_frequently_visited_list();
		},
		methods: {
			goto_list: function goto_list(route) {
				frappe.set_route(route);
			},
			set_frequently_visited_list: function set_frequently_visited_list() {
				var this$1 = this;

				frappe.xcall('frappe.social.doctype.post.post.frequently_visited_links')
					.then(function (data) {
						this$1.frequently_visited_list = data;
					});
			},
			get_label: function get_label(route) {
				return frappe.utils.get_route_label(route);
			},
			go_to_profile_page: function go_to_profile_page() {
				frappe.set_route('social', 'profile', this.user.name);
			}
		}
	};

	/* script */
	            var __vue_script__$5 = script$5;
	            
	/* template */
	var __vue_render__$6 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "flex flex-column" }, [
	    _c("div", { staticClass: "user-details" }, [
	      _c("div", {
	        staticClass: "user-avatar",
	        domProps: { innerHTML: _vm._s(_vm.user_avatar) }
	      }),
	      _vm._v(" "),
	      _c(
	        "a",
	        {
	          staticClass: "user_name",
	          on: {
	            click: function($event) {
	              _vm.go_to_profile_page();
	            }
	          }
	        },
	        [_vm._v(_vm._s(_vm.user.fullname))]
	      )
	    ]),
	    _vm._v(" "),
	    _vm.frequently_visited_list.length
	      ? _c("div", { staticClass: "links" }, [
	          _c("div", { staticClass: "muted-title" }, [
	            _vm._v(
	              "\n\t\t\t" + _vm._s(_vm.__("Frequently Visited Links")) + "\n\t\t"
	            )
	          ]),
	          _vm._v(" "),
	          _c(
	            "div",
	            { staticClass: "flex flex-column" },
	            _vm._l(_vm.frequently_visited_list, function(route_obj) {
	              return _c(
	                "a",
	                {
	                  key: route_obj.route,
	                  staticClass: "route-link",
	                  on: {
	                    click: function($event) {
	                      $event.preventDefault();
	                      _vm.goto_list(route_obj.route);
	                    }
	                  }
	                },
	                [
	                  _vm._v(
	                    "\n\t\t\t\t" +
	                      _vm._s(_vm.get_label(route_obj.route)) +
	                      "\n\t\t\t"
	                  )
	                ]
	              )
	            })
	          )
	        ])
	      : _vm._e()
	  ])
	};
	var __vue_staticRenderFns__$6 = [];
	__vue_render__$6._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$6 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-6d6076b8_0", { source: "\n.route-link[data-v-6d6076b8] {\n  margin: 0px 10px 10px 0;\n  text-transform: capitalize;\n}\n.stats[data-v-6d6076b8] {\n  min-height: 150px;\n}\n.links[data-v-6d6076b8] {\n  margin-top: 20px;\n}\n.user-details .user-avatar[data-v-6d6076b8] .avatar-xl {\n  height: 150px;\n  width: 150px;\n}\n.user-details .user_name[data-v-6d6076b8] {\n  display: block;\n  margin-top: 10px;\n  font-size: 2rem;\n  font-weight: 600;\n}\n", map: {"version":3,"sources":["PostSidebar.vue"],"names":[],"mappings":";AAAA;EACE,wBAAwB;EACxB,2BAA2B;CAC5B;AACD;EACE,kBAAkB;CACnB;AACD;EACE,iBAAiB;CAClB;AACD;EACE,cAAc;EACd,aAAa;CACd;AACD;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,iBAAiB;CAClB","file":"PostSidebar.vue","sourcesContent":[".route-link {\n  margin: 0px 10px 10px 0;\n  text-transform: capitalize;\n}\n.stats {\n  min-height: 150px;\n}\n.links {\n  margin-top: 20px;\n}\n.user-details .user-avatar /deep/ .avatar-xl {\n  height: 150px;\n  width: 150px;\n}\n.user-details .user_name {\n  display: block;\n  margin-top: 10px;\n  font-size: 2rem;\n  font-weight: 600;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$6 = "data-v-6d6076b8";
	  /* module identifier */
	  var __vue_module_identifier__$6 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$6 = false;
	  /* component normalizer */
	  function __vue_normalize__$6(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/PostSidebar.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$6() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$6.styles || (__vue_create_injector__$6.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var PostSidebar = __vue_normalize__$6(
	    { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
	    __vue_inject_styles__$6,
	    __vue_script__$5,
	    __vue_scope_id__$6,
	    __vue_is_functional_template__$6,
	    __vue_module_identifier__$6,
	    __vue_create_injector__$6,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$6 = {
		data: function data() {
			return {
				'events': []
			}
		},
		created: function created() {
			var this$1 = this;

			this.get_events().then(function (events) {
				this$1.events = events;
			});
		},
		methods: {
			get_events: function get_events() {
				var today = frappe.datetime.now_date();
				return frappe.xcall('frappe.desk.doctype.event.event.get_events', {
					start: today,
					end: today
				})
			},
			open_chat: function open_chat() {
				setTimeout(frappe.chat.widget.toggle);
			},
			get_time: function get_time(timestamp) {
				return frappe.datetime.get_time(timestamp)
			},
			open_event: function open_event(event) {
				frappe.set_route('Form', 'Event', event.name);
			}
		}
	};

	/* script */
	            var __vue_script__$6 = script$6;
	            
	/* template */
	var __vue_render__$7 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    [
	      _c("div", { staticClass: "muted-title" }, [
	        _vm._v(_vm._s(_vm.__("Upcoming Events")))
	      ]),
	      _vm._v(" "),
	      _vm._l(_vm.events, function(event) {
	        return _c("div", { key: event.name, staticClass: "event" }, [
	          _c("span", { staticClass: "bold" }, [
	            _vm._v(_vm._s(_vm.get_time(event.starts_on)))
	          ]),
	          _vm._v(" "),
	          _c(
	            "a",
	            {
	              on: {
	                click: function($event) {
	                  _vm.open_event(event);
	                }
	              }
	            },
	            [_vm._v(" " + _vm._s(event.subject))]
	          )
	        ])
	      }),
	      _vm._v(" "),
	      !_vm.events.length
	        ? _c("div", { staticClass: "event" }, [
	            _vm._v("\n\t\t" + _vm._s(_vm.__("No Upcoming Events")) + "\n\t")
	          ])
	        : _vm._e(),
	      _vm._v(" "),
	      _c("div", { staticClass: "muted-title" }, [
	        _vm._v(_vm._s(_vm.__("Chat")))
	      ]),
	      _vm._v(" "),
	      _c("a", { on: { click: _vm.open_chat } }, [
	        _vm._v("\n\t\t" + _vm._s(_vm.__("Open Chat")) + "\n\t")
	      ])
	    ],
	    2
	  )
	};
	var __vue_staticRenderFns__$7 = [];
	__vue_render__$7._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$7 = undefined;
	  /* scoped */
	  var __vue_scope_id__$7 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$7 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$7 = false;
	  /* component normalizer */
	  function __vue_normalize__$7(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/ActivitySidebar.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$7() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$7.styles || (__vue_create_injector__$7.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ActivitySidebar = __vue_normalize__$7(
	    { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
	    __vue_inject_styles__$7,
	    __vue_script__$6,
	    __vue_scope_id__$7,
	    __vue_is_functional_template__$7,
	    __vue_module_identifier__$7,
	    __vue_create_injector__$7,
	    undefined
	  );

	//

	var script$7 = {
		components: {
			PostLoader: PostLoader,
			PostSidebar: PostSidebar,
			ActivitySidebar: ActivitySidebar
		},
		data: function data() {
			return {
				'posts': [],
				'events': [],
				'new_posts_count': 0,
			}
		},
		created: function created() {
			var this$1 = this;

			frappe.realtime.on('new_post', function (post_owner) {
				if (post_owner === frappe.session.user) {
					this$1.load_new_posts();
				} else {
					this$1.new_posts_count += 1;
				}
			});
		},
		methods: {
			load_new_posts: function load_new_posts() {
				this.$emit('load_new_posts');
				this.new_posts_count = 0;
			}
		}
	};

	/* script */
	            var __vue_script__$7 = script$7;
	            
	/* template */
	var __vue_render__$8 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    { staticClass: "wall-container" },
	    [
	      _c("post-sidebar", { staticClass: "post-sidebar hidden-xs" }),
	      _vm._v(" "),
	      _c(
	        "div",
	        { staticClass: "post-container" },
	        [
	          _c(
	            "div",
	            {
	              directives: [
	                {
	                  name: "show",
	                  rawName: "v-show",
	                  value: _vm.new_posts_count,
	                  expression: "new_posts_count"
	                }
	              ],
	              staticClass: "new_posts_count",
	              on: { click: _vm.load_new_posts }
	            },
	            [
	              _vm._v(
	                "\n\t\t\t" +
	                  _vm._s(_vm.new_posts_count + " new post") +
	                  "\n\t\t"
	              )
	            ]
	          ),
	          _vm._v(" "),
	          _c("post-loader", { attrs: { post_list_filter: {} } })
	        ],
	        1
	      ),
	      _vm._v(" "),
	      _c("activity-sidebar", { staticClass: "activity-sidebar hidden-xs" })
	    ],
	    1
	  )
	};
	var __vue_staticRenderFns__$8 = [];
	__vue_render__$8._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$8 = undefined;
	  /* scoped */
	  var __vue_scope_id__$8 = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$8 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$8 = false;
	  /* component normalizer */
	  function __vue_normalize__$8(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/pages/Wall.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$8() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$8.styles || (__vue_create_injector__$8.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var Wall = __vue_normalize__$8(
	    { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
	    __vue_inject_styles__$8,
	    __vue_script__$7,
	    __vue_scope_id__$8,
	    __vue_is_functional_template__$8,
	    __vue_module_identifier__$8,
	    __vue_create_injector__$8,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$8 = {
		props: {
			'user_id': String,
		},
		data: function data() {
			return {
				'user': frappe.user_info(this.user_id),
				'show_add_info_link': false
			}
		},
		created: function created() {
			if (frappe.social.is_session_user_page() && this.is_info_missing()) {
				this.show_add_info_link = true;
			}
		},
		methods: {
			is_info_missing: function is_info_missing() {
				return !this.user.location || !this.user.interest || !this.user.bio;
			},
			go_to_home: function go_to_home() {
				frappe.set_route('social', 'home');
			},
			go_to_user_settings: function go_to_user_settings() {
				frappe.set_route('Form', 'User', this.user_id).then(function (){
					frappe.dom.scroll_to_section('More Information');
				});
			}
		}
	};

	/* script */
	            var __vue_script__$8 = script$8;
	            
	/* template */
	var __vue_render__$9 = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "profile-sidebar flex flex-column" }, [
	    _c("div", { staticClass: "user-details" }, [
	      _c("h3", [_vm._v(_vm._s(_vm.user.fullname))]),
	      _vm._v(" "),
	      _c("p", [_vm._v(_vm._s(_vm.user.bio))]),
	      _vm._v(" "),
	      _vm.user.location
	        ? _c("div", { staticClass: "location" }, [
	            _c("span", { staticClass: "text-muted" }, [
	              _c("i", { staticClass: "fa fa-map-marker" }, [_vm._v(" ")]),
	              _vm._v(_vm._s(_vm.user.location))
	            ])
	          ])
	        : _vm._e(),
	      _vm._v(" "),
	      _vm.user.interest
	        ? _c("div", { staticClass: "interest" }, [
	            _c("span", { staticClass: "text-muted" }, [
	              _c("i", { staticClass: "fa fa-puzzle-piece" }, [_vm._v(" ")]),
	              _vm._v(_vm._s(_vm.user.interest))
	            ])
	          ])
	        : _vm._e(),
	      _vm._v(" "),
	      _vm.show_add_info_link
	        ? _c("a", { on: { click: _vm.go_to_user_settings } }, [
	            _vm._v(_vm._s(_vm.__("Add your information")))
	          ])
	        : _vm._e()
	    ]),
	    _vm._v(" "),
	    _c(
	      "a",
	      {
	        staticClass: "home-link",
	        on: {
	          click: function($event) {
	            _vm.go_to_home();
	          }
	        }
	      },
	      [_vm._v(" ← " + _vm._s(_vm.__("Back To Home")))]
	    )
	  ])
	};
	var __vue_staticRenderFns__$9 = [];
	__vue_render__$9._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$9 = function (inject) {
	    if (!inject) { return }
	    inject("data-v-4aa8d1b6_0", { source: "\n.profile-sidebar[data-v-4aa8d1b6] {\n  padding: 10px 10px 0 0;\n}\n.user-details[data-v-4aa8d1b6] {\n  min-height: 150px;\n}\n.user-details .location[data-v-4aa8d1b6],\n.user-details .interest[data-v-4aa8d1b6] {\n  margin-bottom: 10px;\n}\n.user-details .location i[data-v-4aa8d1b6],\n.user-details .interest i[data-v-4aa8d1b6] {\n  width: 15px;\n}\n.user-details .home-link[data-v-4aa8d1b6] {\n  margin-top: 15px;\n}\n", map: {"version":3,"sources":["ProfileSidebar.vue"],"names":[],"mappings":";AAAA;EACE,uBAAuB;CACxB;AACD;EACE,kBAAkB;CACnB;AACD;;EAEE,oBAAoB;CACrB;AACD;;EAEE,YAAY;CACb;AACD;EACE,iBAAiB;CAClB","file":"ProfileSidebar.vue","sourcesContent":[".profile-sidebar {\n  padding: 10px 10px 0 0;\n}\n.user-details {\n  min-height: 150px;\n}\n.user-details .location,\n.user-details .interest {\n  margin-bottom: 10px;\n}\n.user-details .location i,\n.user-details .interest i {\n  width: 15px;\n}\n.user-details .home-link {\n  margin-top: 15px;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$9 = "data-v-4aa8d1b6";
	  /* module identifier */
	  var __vue_module_identifier__$9 = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$9 = false;
	  /* component normalizer */
	  function __vue_normalize__$9(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/ProfileSidebar.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$9() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$9.styles || (__vue_create_injector__$9.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ProfileSidebar = __vue_normalize__$9(
	    { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
	    __vue_inject_styles__$9,
	    __vue_script__$8,
	    __vue_scope_id__$9,
	    __vue_is_functional_template__$9,
	    __vue_module_identifier__$9,
	    __vue_create_injector__$9,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$9 = {
		props: ['user_id'],
		data: function data() {
			return {
				is_own_profile: this.user_id === frappe.session.user,
				user_avatar: frappe.avatar(this.user_id, 'avatar-xl'),
				background_style: {
					'background': '#262626'
				}
			}
		},
		created: function created() {
			var this$1 = this;

			this.$root.$on('user_image_updated', function () {
				this$1.user_avatar = frappe.avatar(this$1.user_id, 'avatar-xl');
			});
			var user_banner = frappe.user_info(this.user_id).banner_image;
			if (user_banner) {
				this.background_style = {
					'background-image': ("url('" + user_banner + "')")
				};
			}
		},
		methods: {
			update_image: function update_image() {
				if (this.is_own_profile) {
					frappe.social.update_user_image.show();
				}
			}
		},
	};

	/* script */
	            var __vue_script__$9 = script$9;
	            
	/* template */
	var __vue_render__$a = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    { ref: "banner", staticClass: "banner", style: _vm.background_style },
	    [
	      _c("div", {
	        staticClass: "user-avatar container",
	        class: { "editable-image": _vm.is_own_profile },
	        domProps: { innerHTML: _vm._s(_vm.user_avatar) },
	        on: { click: _vm.update_image }
	      })
	    ]
	  )
	};
	var __vue_staticRenderFns__$a = [];
	__vue_render__$a._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$a = function (inject) {
	    if (!inject) { return }
	    inject("data-v-1237dce2_0", { source: "\n.banner[data-v-1237dce2] {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 300px;\n  z-index: 101;\n  position: absolute;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n.banner .user-avatar[data-v-1237dce2] {\n  position: relative;\n}\n.banner .user-avatar[data-v-1237dce2] .avatar {\n  top: 220px;\n  left: 10px;\n  width: 150px;\n  height: 150px;\n  border-radius: 4px;\n  background: white;\n  position: absolute !important;\n}\n.banner .editable-image[data-v-1237dce2] .avatar {\n  cursor: pointer;\n}\n.banner .editable-image[data-v-1237dce2] .avatar :hover {\n  opacity: 0.9;\n}\n", map: {"version":3,"sources":["ProfileBanner.vue"],"names":[],"mappings":";AAAA;EACE,OAAO;EACP,QAAQ;EACR,YAAY;EACZ,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,4BAA4B;EAC5B,6BAA6B;CAC9B;AACD;EACE,mBAAmB;CACpB;AACD;EACE,WAAW;EACX,WAAW;EACX,aAAa;EACb,cAAc;EACd,mBAAmB;EACnB,kBAAkB;EAClB,8BAA8B;CAC/B;AACD;EACE,gBAAgB;CACjB;AACD;EACE,aAAa;CACd","file":"ProfileBanner.vue","sourcesContent":[".banner {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 300px;\n  z-index: 101;\n  position: absolute;\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n}\n.banner .user-avatar {\n  position: relative;\n}\n.banner .user-avatar /deep/ .avatar {\n  top: 220px;\n  left: 10px;\n  width: 150px;\n  height: 150px;\n  border-radius: 4px;\n  background: white;\n  position: absolute !important;\n}\n.banner .editable-image /deep/ .avatar {\n  cursor: pointer;\n}\n.banner .editable-image /deep/ .avatar :hover {\n  opacity: 0.9;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$a = "data-v-1237dce2";
	  /* module identifier */
	  var __vue_module_identifier__$a = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$a = false;
	  /* component normalizer */
	  function __vue_normalize__$a(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/ProfileBanner.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$a() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$a.styles || (__vue_create_injector__$a.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ProfileBanner = __vue_normalize__$a(
	    { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
	    __vue_inject_styles__$a,
	    __vue_script__$9,
	    __vue_scope_id__$a,
	    __vue_is_functional_template__$a,
	    __vue_module_identifier__$a,
	    __vue_create_injector__$a,
	    undefined
	  );

	//
	var script$a = {
		props: ['user_id'],
		components: {
			PostLoader: PostLoader,
			ProfileSidebar: ProfileSidebar,
			ProfileBanner: ProfileBanner,
			ActivitySidebar: ActivitySidebar
		},
		data: function data() {
			return {
				show_list: 'user_posts',
				post_list_filter : null,
				user_posts_count: 0,
				liked_posts_count: 0,
			}
		},
		watch: {
			show_list: function show_list() {
				if (this.show_list == 'user_posts') {
					this.post_list_filter = this.get_user_posts_filter();
				} else if (this.show_list == 'liked_posts') {
					this.post_list_filter = this.get_liked_posts_filter();
				}
			}
		},
		created: function created() {
			this.post_list_filter = this.get_user_posts_filter();
			this.set_post_count();
		},
		methods: {
			get_user_posts_filter: function get_user_posts_filter() {
				return {
					'owner': this.user_id
				}
			},
			get_liked_posts_filter: function get_liked_posts_filter() {
				return {
					'liked_by': ['like', '%' + this.user_id + '%']
				}
			},
			set_post_count: function set_post_count() {
				var this$1 = this;

				frappe.db.count('Post', { filters: this.get_user_posts_filter() })
					.then(function (count) { return this$1.user_posts_count = count; });

				frappe.db.count('Post', { filters: this.get_liked_posts_filter() })
					.then(function (count) { return this$1.liked_posts_count = count; });
			}
		}
	};

	/* script */
	            var __vue_script__$a = script$a;
	            
	/* template */
	var __vue_render__$b = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", [
	    _c(
	      "div",
	      { staticClass: "profile-head" },
	      [_c("profile-banner", { attrs: { user_id: _vm.user_id } })],
	      1
	    ),
	    _vm._v(" "),
	    _c(
	      "div",
	      { staticClass: "profile-container" },
	      [
	        _c("profile-sidebar", {
	          staticClass: "profile-sidebar",
	          attrs: { user_id: _vm.user_id }
	        }),
	        _vm._v(" "),
	        _c(
	          "div",
	          { staticClass: "post-container" },
	          [
	            _c("div", { staticClass: "list-options" }, [
	              _c(
	                "div",
	                {
	                  staticClass: "option",
	                  class: { bold: _vm.show_list === "user_posts" },
	                  on: {
	                    click: function($event) {
	                      _vm.show_list = "user_posts";
	                    }
	                  }
	                },
	                [
	                  _c("span", [_vm._v("Posts")]),
	                  _vm._v(" "),
	                  _c("span", [_vm._v("(" + _vm._s(_vm.user_posts_count) + ")")])
	                ]
	              ),
	              _vm._v(" "),
	              _c(
	                "div",
	                {
	                  staticClass: "option",
	                  class: { bold: _vm.show_list === "liked_posts" },
	                  on: {
	                    click: function($event) {
	                      _vm.show_list = "liked_posts";
	                    }
	                  }
	                },
	                [
	                  _c("span", [_vm._v("Likes")]),
	                  _vm._v(" "),
	                  _c("span", [
	                    _vm._v("(" + _vm._s(_vm.liked_posts_count) + ")")
	                  ])
	                ]
	              )
	            ]),
	            _vm._v(" "),
	            _c("post-loader", {
	              attrs: { post_list_filter: _vm.post_list_filter }
	            })
	          ],
	          1
	        ),
	        _vm._v(" "),
	        _c("activity-sidebar", { staticClass: "activity-sidebar hidden-xs" })
	      ],
	      1
	    )
	  ])
	};
	var __vue_staticRenderFns__$b = [];
	__vue_render__$b._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$b = function (inject) {
	    if (!inject) { return }
	    inject("data-v-6c42f07a_0", { source: "\n.profile-head[data-v-6c42f07a] {\n  height: 190px;\n}\n.profile-sidebar[data-v-6c42f07a] {\n  margin-top: 60px;\n  flex: 20%;\n}\n.right-sidebar[data-v-6c42f07a] {\n  margin-top: 5px;\n}\n.list-options[data-v-6c42f07a] {\n  display: flex;\n}\n.list-options .option[data-v-6c42f07a] {\n  cursor: pointer;\n  padding: 0px 10px 10px 0;\n}\n", map: {"version":3,"sources":["Profile.vue"],"names":[],"mappings":";AAAA;EACE,cAAc;CACf;AACD;EACE,iBAAiB;EACjB,UAAU;CACX;AACD;EACE,gBAAgB;CACjB;AACD;EACE,cAAc;CACf;AACD;EACE,gBAAgB;EAChB,yBAAyB;CAC1B","file":"Profile.vue","sourcesContent":[".profile-head {\n  height: 190px;\n}\n.profile-sidebar {\n  margin-top: 60px;\n  flex: 20%;\n}\n.right-sidebar {\n  margin-top: 5px;\n}\n.list-options {\n  display: flex;\n}\n.list-options .option {\n  cursor: pointer;\n  padding: 0px 10px 10px 0;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$b = "data-v-6c42f07a";
	  /* module identifier */
	  var __vue_module_identifier__$b = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$b = false;
	  /* component normalizer */
	  function __vue_normalize__$b(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/pages/Profile.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$b() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$b.styles || (__vue_create_injector__$b.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var Profile = __vue_normalize__$b(
	    { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
	    __vue_inject_styles__$b,
	    __vue_script__$a,
	    __vue_scope_id__$b,
	    __vue_is_functional_template__$b,
	    __vue_module_identifier__$b,
	    __vue_create_injector__$b,
	    undefined
	  );

	/* script */

	/* template */
	var __vue_render__$c = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", [_vm._v("\n\tNot Found\n")])
	};
	var __vue_staticRenderFns__$c = [];
	__vue_render__$c._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$c = undefined;
	  /* scoped */
	  var __vue_scope_id__$c = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$c = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$c = false;
	  /* component normalizer */
	  function __vue_normalize__$c(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/NotFound.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$c() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$c.styles || (__vue_create_injector__$c.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var NotFound = __vue_normalize__$c(
	    { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
	    __vue_inject_styles__$c,
	    {},
	    __vue_scope_id__$c,
	    __vue_is_functional_template__$c,
	    __vue_module_identifier__$c,
	    __vue_create_injector__$c,
	    undefined
	  );

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//

	var script$b = {
		props: ['src'],
		data: function data() {
			return {
				full_size: false
			}
		},
		created: function created() {
			document.addEventListener('keyup', this.close_preview_on_escape);
		},
		destroyed: function destroyed() {
			document.removeEventListener('keyup', this.close_preview_on_escape);
		},
		methods: {
			close_preview_on_escape: function close_preview_on_escape(e) {
				if (e.keyCode === 27) {
					this.$root.$emit('hide_preview');
				}
			}
		}
	};

	/* script */
	            var __vue_script__$b = script$b;
	            
	/* template */
	var __vue_render__$d = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c("div", { staticClass: "backdrop" }, [
	    _c("img", {
	      class: { "psuedo-zoom": _vm.full_size },
	      attrs: { src: _vm.src },
	      on: {
	        dblclick: function($event) {
	          _vm.full_size = !_vm.full_size;
	        }
	      }
	    }),
	    _vm._v(" "),
	    _c("i", {
	      staticClass: "fa fa-close close",
	      on: {
	        click: function($event) {
	          _vm.$root.$emit("hide_preview");
	        }
	      }
	    })
	  ])
	};
	var __vue_staticRenderFns__$d = [];
	__vue_render__$d._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$d = function (inject) {
	    if (!inject) { return }
	    inject("data-v-5e602a48_0", { source: "\n.backdrop[data-v-5e602a48] {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  background: #0000006e;\n  z-index: 1030;\n  top: 0;\n  right: 0;\n}\n.backdrop img[data-v-5e602a48] {\n  margin: auto;\n  display: block;\n  width: 80%;\n  max-width: 700px;\n  padding-top: 100px;\n}\n.backdrop .psuedo-zoom[data-v-5e602a48] {\n  padding: 10px 0px;\n  width: auto;\n  height: 100vh;\n  max-width: initial;\n}\n.backdrop .close[data-v-5e602a48] {\n  position: absolute;\n  top: 15px;\n  right: 35px;\n  color: black;\n  font-size: 30px;\n}\n", map: {"version":3,"sources":["ImageViewer.vue"],"names":[],"mappings":";AAAA;EACE,gBAAgB;EAChB,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,cAAc;EACd,OAAO;EACP,SAAS;CACV;AACD;EACE,aAAa;EACb,eAAe;EACf,WAAW;EACX,iBAAiB;EACjB,mBAAmB;CACpB;AACD;EACE,kBAAkB;EAClB,YAAY;EACZ,cAAc;EACd,mBAAmB;CACpB;AACD;EACE,mBAAmB;EACnB,UAAU;EACV,YAAY;EACZ,aAAa;EACb,gBAAgB;CACjB","file":"ImageViewer.vue","sourcesContent":[".backdrop {\n  position: fixed;\n  height: 100%;\n  width: 100%;\n  background: #0000006e;\n  z-index: 1030;\n  top: 0;\n  right: 0;\n}\n.backdrop img {\n  margin: auto;\n  display: block;\n  width: 80%;\n  max-width: 700px;\n  padding-top: 100px;\n}\n.backdrop .psuedo-zoom {\n  padding: 10px 0px;\n  width: auto;\n  height: 100vh;\n  max-width: initial;\n}\n.backdrop .close {\n  position: absolute;\n  top: 15px;\n  right: 35px;\n  color: black;\n  font-size: 30px;\n}\n"]}, media: undefined });

	  };
	  /* scoped */
	  var __vue_scope_id__$d = "data-v-5e602a48";
	  /* module identifier */
	  var __vue_module_identifier__$d = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$d = false;
	  /* component normalizer */
	  function __vue_normalize__$d(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/components/ImageViewer.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    {
	      var hook;
	      if (style) {
	        hook = function(context) {
	          style.call(this, createInjector(context));
	        };
	      }

	      if (hook !== undefined) {
	        if (component.functional) {
	          // register for functional component in vue file
	          var originalRender = component.render;
	          component.render = function renderWithStyleInjection(h, context) {
	            hook.call(context);
	            return originalRender(h, context)
	          };
	        } else {
	          // inject component registration as beforeCreate hook
	          var existing = component.beforeCreate;
	          component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
	        }
	      }
	    }

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$d() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$d.styles || (__vue_create_injector__$d.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var ImageViewer = __vue_normalize__$d(
	    { render: __vue_render__$d, staticRenderFns: __vue_staticRenderFns__$d },
	    __vue_inject_styles__$d,
	    __vue_script__$b,
	    __vue_scope_id__$d,
	    __vue_is_functional_template__$d,
	    __vue_module_identifier__$d,
	    __vue_create_injector__$d,
	    undefined
	  );

	//

	function get_route_map() {
		return {
			'social/home': {
				'component': Wall,
				'props': {}
			},
			'social/profile/*': {
				'component': Profile,
				'props': {
					'user_id': frappe.get_route()[2],
					'key': frappe.get_route()[2]
				}
			},
			'not_found': {
				'component': NotFound,
			}
		}
	}

	var script$c = {
		components: {
			ImageViewer: ImageViewer
		},
		data: function data() {
			return {
				current_page: this.get_current_page(),
				show_preview: false,
				preview_image_src: ''
			}
		},
		created: function created() {
			var this$1 = this;

			this.$root.$on('show_preview', function (src) {
				this$1.preview_image_src = src;
				this$1.show_preview = true;
			});

			this.$root.$on('hide_preview', function () {
				this$1.preview_image_src = '';
				this$1.show_preview = false;
			});

			frappe.app_updates.on('user_image_updated', function () {
				this$1.$root.$emit('user_image_updated');
			});
		},
		mounted: function mounted() {
			var this$1 = this;

			frappe.route.on('change', function () {
				if (frappe.get_route()[0] === 'social') {
					this$1.set_current_page();
					frappe.utils.scroll_to(0);
					$("body").attr("data-route", frappe.get_route_str());
				}
			});
			frappe.ui.setup_like_popover($(this.$refs.social), '.likes', false);
		},
		methods: {
			set_current_page: function set_current_page() {
				this.current_page = this.get_current_page();
			},
			get_current_page: function get_current_page() {
				var route_map = get_route_map();
				var route = frappe.get_route_str();
				if (route_map[route]) {
					return route_map[route];
				} else {
					return route_map[route.substring(0, route.lastIndexOf('/')) + '/*'] || route_map['not_found']
				}
			},
		}
	};

	/* script */
	            var __vue_script__$c = script$c;
	            
	/* template */
	var __vue_render__$e = function() {
	  var _vm = this;
	  var _h = _vm.$createElement;
	  var _c = _vm._self._c || _h;
	  return _c(
	    "div",
	    { ref: "social", staticClass: "social" },
	    [
	      _c(
	        "keep-alive",
	        [
	          _c(
	            _vm.current_page.component,
	            _vm._b(
	              { tag: "component" },
	              "component",
	              _vm.current_page.props,
	              false
	            )
	          )
	        ],
	        1
	      ),
	      _vm._v(" "),
	      _vm.show_preview
	        ? _c("image-viewer", { attrs: { src: _vm.preview_image_src } })
	        : _vm._e()
	    ],
	    1
	  )
	};
	var __vue_staticRenderFns__$e = [];
	__vue_render__$e._withStripped = true;

	  /* style */
	  var __vue_inject_styles__$e = undefined;
	  /* scoped */
	  var __vue_scope_id__$e = undefined;
	  /* module identifier */
	  var __vue_module_identifier__$e = undefined;
	  /* functional template */
	  var __vue_is_functional_template__$e = false;
	  /* component normalizer */
	  function __vue_normalize__$e(
	    template, style, script,
	    scope, functional, moduleIdentifier,
	    createInjector, createInjectorSSR
	  ) {
	    var component = (typeof script === 'function' ? script.options : script) || {};

	    // For security concerns, we use only base name in production mode.
	    component.__file = "/opt/bench/erpnext/apps/frappe/frappe/public/js/frappe/social/Home.vue";

	    if (!component.render) {
	      component.render = template.render;
	      component.staticRenderFns = template.staticRenderFns;
	      component._compiled = true;

	      if (functional) { component.functional = true; }
	    }

	    component._scopeId = scope;

	    return component
	  }
	  /* style inject */
	  function __vue_create_injector__$e() {
	    var head = document.head || document.getElementsByTagName('head')[0];
	    var styles = __vue_create_injector__$e.styles || (__vue_create_injector__$e.styles = {});
	    var isOldIE =
	      typeof navigator !== 'undefined' &&
	      /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());

	    return function addStyle(id, css) {
	      if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) { return } // SSR styles are present.

	      var group = isOldIE ? css.media || 'default' : id;
	      var style = styles[group] || (styles[group] = { ids: [], parts: [], element: undefined });

	      if (!style.ids.includes(id)) {
	        var code = css.source;
	        var index = style.ids.length;

	        style.ids.push(id);

	        if (isOldIE) {
	          style.element = style.element || document.querySelector('style[data-group=' + group + ']');
	        }

	        if (!style.element) {
	          var el = style.element = document.createElement('style');
	          el.type = 'text/css';

	          if (css.media) { el.setAttribute('media', css.media); }
	          if (isOldIE) {
	            el.setAttribute('data-group', group);
	            el.setAttribute('data-next-index', '0');
	          }

	          head.appendChild(el);
	        }

	        if (isOldIE) {
	          index = parseInt(style.element.getAttribute('data-next-index'));
	          style.element.setAttribute('data-next-index', index + 1);
	        }

	        if (style.element.styleSheet) {
	          style.parts.push(code);
	          style.element.styleSheet.cssText = style.parts
	            .filter(Boolean)
	            .join('\n');
	        } else {
	          var textNode = document.createTextNode(code);
	          var nodes = style.element.childNodes;
	          if (nodes[index]) { style.element.removeChild(nodes[index]); }
	          if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }
	          else { style.element.appendChild(textNode); }
	        }
	      }
	    }
	  }
	  /* style inject SSR */
	  

	  
	  var Home = __vue_normalize__$e(
	    { render: __vue_render__$e, staticRenderFns: __vue_staticRenderFns__$e },
	    __vue_inject_styles__$e,
	    __vue_script__$c,
	    __vue_scope_id__$e,
	    __vue_is_functional_template__$e,
	    __vue_module_identifier__$e,
	    __vue_create_injector__$e,
	    undefined
	  );

	frappe.provide('frappe.social');

	frappe.social.Home = class SocialHome {
		constructor(ref) {
		var parent = ref.parent;

			this.$parent = $(parent);
			this.page = parent.page;
			this.setup_header();
			this.make_body();
			this.set_primary_action();
		}
		make_body() {
			var this$1 = this;

			this.$social_container = this.$parent.find('.layout-main');
			frappe.require('/assets/js/frappe-vue.min.js', function () {
				new Vue({
					el: this$1.$social_container[0],
					render: function (h) { return h(Home); }
				});
			});
		}
		setup_header() {
			this.page.set_title(__('Social'));
		}
		set_primary_action() {
			this.page.set_primary_action(__('Post'), function () {
				frappe.social.post_dialog.show();
			});
		}
	};

	frappe.social.post_dialog = new frappe.ui.Dialog({
		title: __('Create Post'),
		fields: [
			{
				fieldtype: "Text Editor",
				fieldname: "content",
				label: __("Content"),
				reqd: 1
			}
		],
		primary_action_label: __('Post'),
		primary_action: function (values) {
			frappe.social.post_dialog.disable_primary_action();
			var post = frappe.model.get_new_doc('Post');
			post.content = values.content;
			frappe.db.insert(post).then(function () {
				frappe.social.post_dialog.clear();
				frappe.social.post_dialog.hide();
			}).finally(function () {
				frappe.social.post_dialog.enable_primary_action();
			});
		}
	});

	frappe.social.update_user_image = new frappe.ui.Dialog({
		title: __("User Image"),
		fields: [
			{
				fieldtype: "Attach Image",
				fieldname: "image",
				label: __("Image"),
				reqd: 1,
				default: frappe.user.image()
			} ],
		primary_action_label: __('Set Image'),
		primary_action: function (values) {
			var user = frappe.session.user;
			frappe.db.set_value('User', user, 'user_image', values.image)
				.then(function (resp) {
					frappe.boot.user_info[user].image = resp.message.user_image;
					frappe.app_updates.trigger('user_image_updated');
					frappe.social.update_user_image.clear();
					frappe.social.update_user_image.hide();
				})
				.fail(function (err) {
					frappe.msgprint(err);
				});
		}
	});

	frappe.social.is_home_page = function () {
		return frappe.get_route()[0] === 'social' && frappe.get_route()[1] === 'home';
	};

	frappe.social.is_profile_page = function (user) {
		return frappe.get_route()[0] === 'social'
			&& frappe.get_route()[1] === 'profile'
			&& (user ? frappe.get_route()[2] === user : true);
	};

	frappe.social.is_session_user_page = function () {
		return frappe.social.is_profile_page() && frappe.get_route()[2] === frappe.session.user;
	};

	frappe.provide('frappe.app_updates');

	frappe.utils.make_event_emitter(frappe.app_updates);

}());
//# sourceMappingURL=social.min.js.map
